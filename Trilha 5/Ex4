abstract class VoteSystem {
    protected votes: Record<string, number> = {};

    abstract voteFor(candidate: string): void;

    abstract getResults(): object;
}

class Election extends VoteSystem {
    public voteFor(candidate: string): void {
        if (this.votes[candidate]) {
            this.votes[candidate]++;
        } else {
            this.votes[candidate] = 1;
        }
    }

    public getResults(): object {
        return this.votes;
    }
}

class Poll extends VoteSystem {
    public voteFor(candidate: string): void {

        if (this.votes[candidate]) {
            this.votes[candidate]++;
        } else {
            this.votes[candidate] = 1;
        }
    }

    public getResults(): object {
        const sortedCandidates = Object.entries(this.votes).sort((a, b) => b[1] - a[1]);
        return Object.fromEntries(sortedCandidates);
    }
}